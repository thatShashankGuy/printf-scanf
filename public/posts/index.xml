<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Printf/Scanf</title>
    <link>https://printf-scanf.pages.dev/posts/</link>
    <description>Recent content in Posts on Printf/Scanf</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://printf-scanf.pages.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Garbage Collection in JavaScript</title>
      <link>https://printf-scanf.pages.dev/posts/markandsweep/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/markandsweep/</guid>
      <description>What is Garbage Collection? Unlike low-level languages like C, where memory management (allocation and freeing of memory) is handled by developers, high-level languages like JavaScript manage memory automatically. JavaScript abstracts the key concepts of allocating and freeing memory by implementing various algorithms.&#xA;The process of identifying memory that has been allocated but is no longer required by the program, referred to as garbage, is known as garbage collection.&#xA;Garbage Collection Algorithms There are many garbage collection algorithms, such as Mark and Sweep, Reference Counting, Generational Garbage Collection, and Mark-Compact, among others.</description>
    </item>
    <item>
      <title>Profiling Your Node.js Production Code</title>
      <link>https://printf-scanf.pages.dev/posts/nodejsprofiling/</link>
      <pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/nodejsprofiling/</guid>
      <description>Introduction When building and running code on a production server, it&amp;rsquo;s crucial to be aware of memory usage, CPU cycles, and other key performance indicators (KPIs) like the time complexity and duration of function calls. Software engineers often obtain and analyze these KPIs to optimize running programs and debug issues, such as memory leaks and CPU utilization, which are difficult to catch in a development environment. This activity is called profiling.</description>
    </item>
    <item>
      <title>Learn to Love Boring</title>
      <link>https://printf-scanf.pages.dev/posts/learntoloveboring/</link>
      <pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/learntoloveboring/</guid>
      <description>This is not my usual technical/CSE adjacent post. My articles are mostly tech-related, but I wanted to discuss something different today.&#xA;For the past few months, precisely six, I have not been writing anything. I re-did my Svelte SPA site and turned it into this Hugo based SSG, removing the clutter to focus on writing.&#xA;But as you see, I have not written anything since last year. Why?&#xA;Firstly, in the past quarter, I switched jobs, and the transitional period comes with a lot of uncertainty in routine.</description>
    </item>
    <item>
      <title>Database Paradigms - ACID, BASE and CAP in brief</title>
      <link>https://printf-scanf.pages.dev/posts/acidbasecap/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/acidbasecap/</guid>
      <description>When starting a project, one of the earliest design decisions you need to make is selecting a database. There are various databases available in the market.&#xA;Initially, most databases were of SQL flavors, grouped as Relational Databases, and they used the de facto method of saving data into tables and establishing relationships between these tables. You can read more about History of SQL.&#xA;However, with the advent of NoSQL databases, this paradigm was challenged, opting for a more relaxed and schema-less approach, saving data as objects rather than in rigid tables with relationships.</description>
    </item>
    <item>
      <title>Coding My Way Out of Burnout</title>
      <link>https://printf-scanf.pages.dev/posts/burnout/</link>
      <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/burnout/</guid>
      <description>About three months ago, I felt intense pressure in my career. I did not feel like learning anything, and doing my job was a struggle. At that point in time, I didn&amp;rsquo;t understand what was going on, but now I know I was going through a phase of burnout.&#xA;Burnouts are quite common in the workforce, and you will find hundreds of people sharing their stories of burnout.&#xA;One thing you will come across quite often when you search for &amp;lsquo;how to deal with burnouts in tech&amp;rsquo; is to just take a break.</description>
    </item>
    <item>
      <title>Async IO programming with Node js</title>
      <link>https://printf-scanf.pages.dev/posts/ionodejs/</link>
      <pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/ionodejs/</guid>
      <description>Introduction Asynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished.&#xA;Consider Node/ Browser Architecture , When program starts it start a main thread on which wil run your javascript program . While one set of instructions ( code ) is running on this thread the thread is busy</description>
    </item>
    <item>
      <title>The Typescript Programming Guide</title>
      <link>https://printf-scanf.pages.dev/posts/typescript/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/typescript/</guid>
      <description>Introduction By now, TypeScript has emerged as a fully-fledged de facto standard for writing secure, enterprise-grade Node apps. I am building this guide from my experience and the TypeScript handbook to offer a brief introduction for those transitioning from JavaScript but please beware I am no SME on typescript. Readers should have some familiarity with JavaScript and Object-Oriented Programming (OOP). As we all are busy people I have kept the guide as concise as possible while being as clear as I can.</description>
    </item>
    <item>
      <title>Go Basics - Error as values</title>
      <link>https://printf-scanf.pages.dev/posts/gobasicerror/</link>
      <pubDate>Sun, 29 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/gobasicerror/</guid>
      <description>Error Handling in Go is bit different than traditional way you must have seen in programming in languages like JavaScript . Instead of traditional &amp;ldquo;Try/Catch&amp;rdquo; Go use something called error as values.&#xA;Go, like most statically-typed languages, mandates that you define the return type of your functions. In order to understand Error handling we must first understand return types .&#xA;Let&amp;rsquo;s dive in by creating a basic function, demoFunc, that accepts a string argument and returns it in all lowercase letters.</description>
    </item>
    <item>
      <title>Go Basics - Map and Structs</title>
      <link>https://printf-scanf.pages.dev/posts/gobasicmapstruct/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/gobasicmapstruct/</guid>
      <description>While arrays and slices form the core of sequential data structures, maps, interfaces, and structs offer unique capabilities, especially when transitioning from a language like TypeScript. Lets talk about them today.&#xA;Maps: Go&amp;rsquo;s Key-Value Store: A map in Go is a composite type that represents a hash table or a dictionary or object/map in typescript&amp;rsquo;s case. It associates keys and values where each key maps to a unique value. The key can be of any type for which the equality operation is defined, such as integers, floats, strings, etc.</description>
    </item>
    <item>
      <title>Go Basics - Arrays vs Slices</title>
      <link>https://printf-scanf.pages.dev/posts/gobasicarrayslices/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/gobasicarrayslices/</guid>
      <description>With this article I have tried giving a brief overview of two fundamental data structures in the Go programming language: arrays and slices. This may help anyone coming from a dynamic language to Go and understand the basics of couple of most used data structures in all programs .&#xA;Arrays&#xA;Arrays are fundamental data structures in the Go programming language that allow you to store and manage collections of elements of the same type.</description>
    </item>
    <item>
      <title>Go Basics - Pointers</title>
      <link>https://printf-scanf.pages.dev/posts/gopointers/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://printf-scanf.pages.dev/posts/gopointers/</guid>
      <description>In Go, a pointer is a variable that stores the memory address of another variable. We use the ampersand (&amp;amp;) operator to get the memory address of a variable, and the asterisk (*) operator to declare a pointer variable or to access the value pointed to by a pointer.&#xA;In the example code provided, p is a pointer to the variable x. We can use the * operator to access the value stored in the memory location pointed to by p.</description>
    </item>
  </channel>
</rss>
